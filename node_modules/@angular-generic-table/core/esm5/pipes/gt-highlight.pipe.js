/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
var GtHighlightPipe = /** @class */ (function () {
    function GtHighlightPipe(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} text
     * @param {?} searchTerm
     * @return {?}
     */
    GtHighlightPipe.prototype.transform = /**
     * @param {?} text
     * @param {?} searchTerm
     * @return {?}
     */
    function (text, searchTerm) {
        var /** @type {?} */ haystackAlwaysString = text + '';
        var /** @type {?} */ highlightedText = haystackAlwaysString; // fallback
        var /** @type {?} */ searchPattern;
        try {
            searchPattern = new RegExp('(' +
                searchTerm
                    .toLowerCase()
                    .match(/".*?"|[^ ]+/g) // extract words
                    .map(function (needle) { return needle.replace(/"(.*?)"/, '$1'); } // strip away '"'
                // strip away '"'
                )
                    .join('|') + // combine words
                ')', 'ig');
        }
        catch (/** @type {?} */ error) {
            return this.sanitizer.bypassSecurityTrustHtml(highlightedText);
        }
        var /** @type {?} */ containsTagPattern = /(<.*?>)(.*)(<\/.*?>)/gi;
        var /** @type {?} */ containsTagMatches = containsTagPattern.exec(haystackAlwaysString);
        if (containsTagMatches) {
            // tag exists in haystack
            highlightedText =
                containsTagMatches[1] +
                    containsTagMatches[2].replace(searchPattern, '<span class="gt-highlight-search">$1</span>') +
                    containsTagMatches[3];
        }
        else {
            highlightedText = haystackAlwaysString.replace(searchPattern, '<span class="gt-highlight-search">$1</span>');
        }
        return this.sanitizer.bypassSecurityTrustHtml(highlightedText);
    };
    GtHighlightPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gtHighlight'
                },] },
    ];
    /** @nocollapse */
    GtHighlightPipe.ctorParameters = function () { return [
        { type: DomSanitizer, },
    ]; };
    return GtHighlightPipe;
}());
export { GtHighlightPipe };
function GtHighlightPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtHighlightPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtHighlightPipe.ctorParameters;
    /** @type {?} */
    GtHighlightPipe.prototype.sanitizer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtaGlnaGxpZ2h0LnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1nZW5lcmljLXRhYmxlL2NvcmUvIiwic291cmNlcyI6WyJwaXBlcy9ndC1oaWdobGlnaHQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBWSxNQUFNLDJCQUEyQixDQUFDOztJQU1sRSx5QkFBb0IsU0FBdUI7UUFBdkIsY0FBUyxHQUFULFNBQVMsQ0FBYztLQUFJOzs7Ozs7SUFFL0MsbUNBQVM7Ozs7O0lBQVQsVUFBVSxJQUFZLEVBQUUsVUFBa0I7UUFDekMscUJBQU0sb0JBQW9CLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUN2QyxxQkFBSSxlQUFlLEdBQUcsb0JBQW9CLENBQUM7UUFFM0MscUJBQUksYUFBYSxDQUFDO1FBQ2xCLElBQUk7WUFDSCxhQUFhLEdBQUcsSUFBSSxNQUFNLENBQ3pCLEdBQUc7Z0JBQ0gsVUFBVTtxQkFDUixXQUFXLEVBQUU7cUJBQ2IsS0FBSyxDQUFDLGNBQWMsQ0FBQztxQkFDckIsR0FBRyxDQUNILFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQS9CLENBQStCO2dCQUFDLGlCQUFpQjtpQkFDM0Q7cUJBQ0EsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQjtnQkFDN0IsR0FBRyxFQUNKLElBQUksQ0FDSixDQUFDO1NBQ0Y7UUFBQyx3QkFBTyxLQUFLLEVBQUU7WUFDZixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDL0Q7UUFFRCxxQkFBTSxrQkFBa0IsR0FBRyx3QkFBd0IsQ0FBQztRQUNwRCxxQkFBTSxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUV6RSxJQUFJLGtCQUFrQixFQUFFOztZQUV2QixlQUFlO2dCQUNkLGtCQUFrQixDQUFDLENBQUMsQ0FBQztvQkFDckIsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUM1QixhQUFhLEVBQ2IsNkNBQTZDLENBQzdDO29CQUNELGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTixlQUFlLEdBQUcsb0JBQW9CLENBQUMsT0FBTyxDQUM3QyxhQUFhLEVBQ2IsNkNBQTZDLENBQzdDLENBQUM7U0FDRjtRQUVELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztLQUMvRDs7Z0JBaERELElBQUksU0FBQztvQkFDTCxJQUFJLEVBQUUsYUFBYTtpQkFDbkI7Ozs7Z0JBSlEsWUFBWTs7MEJBRHJCOztTQU1hLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbkBQaXBlKHtcblx0bmFtZTogJ2d0SGlnaGxpZ2h0J1xufSlcbmV4cG9ydCBjbGFzcyBHdEhpZ2hsaWdodFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcikge31cblxuXHR0cmFuc2Zvcm0odGV4dDogc3RyaW5nLCBzZWFyY2hUZXJtOiBzdHJpbmcpOiBTYWZlSHRtbCB7XG5cdFx0Y29uc3QgaGF5c3RhY2tBbHdheXNTdHJpbmcgPSB0ZXh0ICsgJyc7XG5cdFx0bGV0IGhpZ2hsaWdodGVkVGV4dCA9IGhheXN0YWNrQWx3YXlzU3RyaW5nOyAvLyBmYWxsYmFja1xuXG5cdFx0bGV0IHNlYXJjaFBhdHRlcm47XG5cdFx0dHJ5IHtcblx0XHRcdHNlYXJjaFBhdHRlcm4gPSBuZXcgUmVnRXhwKFxuXHRcdFx0XHQnKCcgK1xuXHRcdFx0XHRzZWFyY2hUZXJtXG5cdFx0XHRcdFx0LnRvTG93ZXJDYXNlKClcblx0XHRcdFx0XHQubWF0Y2goL1wiLio/XCJ8W14gXSsvZykgLy8gZXh0cmFjdCB3b3Jkc1xuXHRcdFx0XHRcdC5tYXAoXG5cdFx0XHRcdFx0XHRuZWVkbGUgPT4gbmVlZGxlLnJlcGxhY2UoL1wiKC4qPylcIi8sICckMScpIC8vIHN0cmlwIGF3YXkgJ1wiJ1xuXHRcdFx0XHRcdClcblx0XHRcdFx0XHQuam9pbignfCcpICsgLy8gY29tYmluZSB3b3Jkc1xuXHRcdFx0XHRcdCcpJyxcblx0XHRcdFx0J2lnJ1xuXHRcdFx0KTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0cmV0dXJuIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKGhpZ2hsaWdodGVkVGV4dCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgY29udGFpbnNUYWdQYXR0ZXJuID0gLyg8Lio/PikoLiopKDxcXC8uKj8+KS9naTtcblx0XHRjb25zdCBjb250YWluc1RhZ01hdGNoZXMgPSBjb250YWluc1RhZ1BhdHRlcm4uZXhlYyhoYXlzdGFja0Fsd2F5c1N0cmluZyk7XG5cblx0XHRpZiAoY29udGFpbnNUYWdNYXRjaGVzKSB7XG5cdFx0XHQvLyB0YWcgZXhpc3RzIGluIGhheXN0YWNrXG5cdFx0XHRoaWdobGlnaHRlZFRleHQgPVxuXHRcdFx0XHRjb250YWluc1RhZ01hdGNoZXNbMV0gK1xuXHRcdFx0XHRjb250YWluc1RhZ01hdGNoZXNbMl0ucmVwbGFjZShcblx0XHRcdFx0XHRzZWFyY2hQYXR0ZXJuLFxuXHRcdFx0XHRcdCc8c3BhbiBjbGFzcz1cImd0LWhpZ2hsaWdodC1zZWFyY2hcIj4kMTwvc3Bhbj4nXG5cdFx0XHRcdCkgK1xuXHRcdFx0XHRjb250YWluc1RhZ01hdGNoZXNbM107XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhpZ2hsaWdodGVkVGV4dCA9IGhheXN0YWNrQWx3YXlzU3RyaW5nLnJlcGxhY2UoXG5cdFx0XHRcdHNlYXJjaFBhdHRlcm4sXG5cdFx0XHRcdCc8c3BhbiBjbGFzcz1cImd0LWhpZ2hsaWdodC1zZWFyY2hcIj4kMTwvc3Bhbj4nXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChoaWdobGlnaHRlZFRleHQpO1xuXHR9XG59XG4iXX0=