/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import * as Tether from 'tether';
export class GtDropdownComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.selectedChange = new EventEmitter();
        this.active = false;
        this.state = new Subject();
    }
    /**
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} selection
     * @return {?}
     */
    set selected(selection) {
        this._selected = selection;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    select(option) {
        this.active = false;
        this.state.next(this.active);
        if (this._selected !== option) {
            this.selectedChange.emit(option);
        }
    }
    /**
     * @return {?}
     */
    toggleDropdown() {
        this.active = !this.active;
        setTimeout(() => {
            this.state.next(this.active);
        }, 0);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.state.subscribe(state => {
            if (state) {
                this.tether = new Tether({
                    element: '#' + this.id + '_menu',
                    target: '#' + this.id,
                    attachment: 'top left',
                    targetAttachment: 'bottom left',
                    constraints: [
                        {
                            to: 'window',
                            attachment: 'together'
                        }
                    ]
                });
                this.tether.position();
                // set up click listener and listen for click outside dropdown
                this.clickListener = this.renderer.listen('document', 'click', (event) => {
                    this.active = false;
                    this.state.next(this.active);
                });
                // set up keyboard listener and listen for escape key up
                this.keyupListener = this.renderer.listen('document', 'keyup', (event) => {
                    switch (event.key) {
                        case 'Escape':
                            this.active = false;
                            this.state.next(this.active);
                            break;
                    }
                });
            }
            else {
                this.tether.destroy();
                this.removeListeners();
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListeners();
    }
    /**
     * @return {?}
     */
    removeListeners() {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.keyupListener) {
            this.keyupListener();
        }
    }
}
GtDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'gt-dropdown',
                template: `
    <div class="dropdown gt-dropdown" [ngClass]="{'show':active}" [attr.id]="id">
      <div class="dropdown-toggle" (click)="toggleDropdown()" [attr.aria-expanded]="active">{{selected}}</div>
      <div class="gt-dropdown-menu dropdown-menu" *ngIf="active" [ngClass]="{'show':active}" [attr.id]="id+'_menu'">
        <button *ngFor="let option of options;" class="dropdown-item" (click)="select(option)" [ngClass]="{'active':option === selected}">{{option}}</button>
      </div>
    </div>
  `,
                styles: [
                    `
    .gt-dropdown .dropdown-toggle {
      cursor: pointer;
    }
    .gt-dropdown .dropdown-toggle::after {
      transition: opacity 0.4s ease-in-out;
      opacity: 0;
    }
    .gt-dropdown .dropdown-toggle:hover::after {
      opacity: 1;
    }
  `
                ]
            },] },
];
/** @nocollapse */
GtDropdownComponent.ctorParameters = () => [
    { type: Renderer2, },
];
GtDropdownComponent.propDecorators = {
    "selected": [{ type: Input },],
    "options": [{ type: Input },],
    "id": [{ type: Input },],
    "selectedChange": [{ type: Output },],
};
function GtDropdownComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtDropdownComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtDropdownComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GtDropdownComponent.propDecorators;
    /** @type {?} */
    GtDropdownComponent.prototype._selected;
    /** @type {?} */
    GtDropdownComponent.prototype.options;
    /** @type {?} */
    GtDropdownComponent.prototype.id;
    /** @type {?} */
    GtDropdownComponent.prototype.selectedChange;
    /** @type {?} */
    GtDropdownComponent.prototype.active;
    /** @type {?} */
    GtDropdownComponent.prototype.state;
    /** @type {?} */
    GtDropdownComponent.prototype.tether;
    /** @type {?} */
    GtDropdownComponent.prototype.clickListener;
    /** @type {?} */
    GtDropdownComponent.prototype.keyupListener;
    /** @type {?} */
    GtDropdownComponent.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtZHJvcGRvd24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFuZ3VsYXItZ2VuZXJpYy10YWJsZS9jb3JlLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy9ndC1kcm9wZG93bi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBQ04sU0FBUyxFQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdkMsT0FBTyxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUM7QUEyQmpDLE1BQU07Ozs7SUFvQkwsWUFBb0IsUUFBbUI7UUFBbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVzs4QkFSTyxJQUFJLFlBQVksRUFBRTtzQkFFdkQsS0FBSztxQkFDWSxJQUFJLE9BQU8sRUFBRTtLQUtJOzs7O0lBbkIzQyxJQUFJLFFBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7S0FDdEI7Ozs7O1FBSUcsUUFBUSxDQUFDLFNBQVM7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7Ozs7OztJQWM1QixNQUFNLENBQUMsTUFBVztRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0IsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLE1BQU0sRUFBRTtZQUM5QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNqQztLQUNEOzs7O0lBRUQsY0FBYztRQUNiLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzNCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDN0IsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNOOzs7O0lBRUQsUUFBUTtRQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzVCLElBQUksS0FBSyxFQUFFO2dCQUNWLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUM7b0JBQ3hCLE9BQU8sRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxPQUFPO29CQUNoQyxNQUFNLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFO29CQUNyQixVQUFVLEVBQUUsVUFBVTtvQkFDdEIsZ0JBQWdCLEVBQUUsYUFBYTtvQkFDL0IsV0FBVyxFQUFFO3dCQUNaOzRCQUNDLEVBQUUsRUFBRSxRQUFROzRCQUNaLFVBQVUsRUFBRSxVQUFVO3lCQUN0QjtxQkFDRDtpQkFDRCxDQUFDLENBQUM7Z0JBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQzs7Z0JBR3ZCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQ3hDLFVBQVUsRUFDVixPQUFPLEVBQ1AsQ0FBQyxLQUFpQixFQUFFLEVBQUU7b0JBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO29CQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQzdCLENBQ0QsQ0FBQzs7Z0JBR0YsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FDeEMsVUFBVSxFQUNWLE9BQU8sRUFDUCxDQUFDLEtBQW9CLEVBQUUsRUFBRTtvQkFDeEIsUUFBUSxLQUFLLENBQUMsR0FBRyxFQUFFO3dCQUNsQixLQUFLLFFBQVE7NEJBQ1osSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7NEJBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs0QkFDN0IsTUFBTTtxQkFDUDtpQkFDRCxDQUNELENBQUM7YUFDRjtpQkFBTTtnQkFDTixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUN0QixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7YUFDdkI7U0FDRCxDQUFDLENBQUM7S0FDSDs7OztJQUVELFdBQVc7UUFDVixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDdkI7Ozs7SUFFRCxlQUFlO1FBQ2QsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUNyQjtRQUNELElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN2QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDckI7S0FDRDs7O1lBekhELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsYUFBYTtnQkFDdkIsUUFBUSxFQUFFOzs7Ozs7O0dBT1I7Z0JBQ0YsTUFBTSxFQUFFO29CQUNQOzs7Ozs7Ozs7OztHQVdDO2lCQUNEO2FBQ0Q7Ozs7WUE3QkEsU0FBUzs7O3lCQW9DUixLQUFLO3dCQUlMLEtBQUs7bUJBQ0wsS0FBSzsrQkFDTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRFdmVudEVtaXR0ZXIsXG5cdElucHV0LFxuXHRPbkRlc3Ryb3ksXG5cdE9uSW5pdCxcblx0T3V0cHV0LFxuXHRSZW5kZXJlcjJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcbmltcG9ydCAqIGFzIFRldGhlciBmcm9tICd0ZXRoZXInO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdndC1kcm9wZG93bicsXG5cdHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cImRyb3Bkb3duIGd0LWRyb3Bkb3duXCIgW25nQ2xhc3NdPVwieydzaG93JzphY3RpdmV9XCIgW2F0dHIuaWRdPVwiaWRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi10b2dnbGVcIiAoY2xpY2spPVwidG9nZ2xlRHJvcGRvd24oKVwiIFthdHRyLmFyaWEtZXhwYW5kZWRdPVwiYWN0aXZlXCI+e3tzZWxlY3RlZH19PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZ3QtZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51XCIgKm5nSWY9XCJhY3RpdmVcIiBbbmdDbGFzc109XCJ7J3Nob3cnOmFjdGl2ZX1cIiBbYXR0ci5pZF09XCJpZCsnX21lbnUnXCI+XG4gICAgICAgIDxidXR0b24gKm5nRm9yPVwibGV0IG9wdGlvbiBvZiBvcHRpb25zO1wiIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiIChjbGljayk9XCJzZWxlY3Qob3B0aW9uKVwiIFtuZ0NsYXNzXT1cInsnYWN0aXZlJzpvcHRpb24gPT09IHNlbGVjdGVkfVwiPnt7b3B0aW9ufX08L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICBgLFxuXHRzdHlsZXM6IFtcblx0XHRgXG4gICAgLmd0LWRyb3Bkb3duIC5kcm9wZG93bi10b2dnbGUge1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIH1cbiAgICAuZ3QtZHJvcGRvd24gLmRyb3Bkb3duLXRvZ2dsZTo6YWZ0ZXIge1xuICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjRzIGVhc2UtaW4tb3V0O1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG4gICAgLmd0LWRyb3Bkb3duIC5kcm9wZG93bi10b2dnbGU6aG92ZXI6OmFmdGVyIHtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgfVxuICBgXG5cdF1cbn0pXG5leHBvcnQgY2xhc3MgR3REcm9wZG93bkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblx0Z2V0IHNlbGVjdGVkKCkge1xuXHRcdHJldHVybiB0aGlzLl9zZWxlY3RlZDtcblx0fVxuXG5cdF9zZWxlY3RlZDogYW55O1xuXHRASW5wdXQoKVxuXHRzZXQgc2VsZWN0ZWQoc2VsZWN0aW9uKSB7XG5cdFx0dGhpcy5fc2VsZWN0ZWQgPSBzZWxlY3Rpb247XG5cdH1cblx0QElucHV0KCkgb3B0aW9uczogQXJyYXk8YW55Pjtcblx0QElucHV0KCkgaWQ6IHN0cmluZztcblx0QE91dHB1dCgpIHNlbGVjdGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuXHRhY3RpdmUgPSBmYWxzZTsgLy8gaXMgZHJvcGRvd24gYWN0aXZlIG9yIG5vdFxuXHRzdGF0ZTogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0KCk7IC8vIGN1cnJlbnQgc3RhdGUgb2YgZHJvcGRvd25cblx0dGV0aGVyOiBhbnk7XG5cdGNsaWNrTGlzdGVuZXI6IEZ1bmN0aW9uO1xuXHRrZXl1cExpc3RlbmVyOiBGdW5jdGlvbjtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cblx0c2VsZWN0KG9wdGlvbjogYW55KSB7XG5cdFx0dGhpcy5hY3RpdmUgPSBmYWxzZTtcblx0XHR0aGlzLnN0YXRlLm5leHQodGhpcy5hY3RpdmUpO1xuXHRcdGlmICh0aGlzLl9zZWxlY3RlZCAhPT0gb3B0aW9uKSB7XG5cdFx0XHR0aGlzLnNlbGVjdGVkQ2hhbmdlLmVtaXQob3B0aW9uKTtcblx0XHR9XG5cdH1cblxuXHR0b2dnbGVEcm9wZG93bigpIHtcblx0XHR0aGlzLmFjdGl2ZSA9ICF0aGlzLmFjdGl2ZTtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdHRoaXMuc3RhdGUubmV4dCh0aGlzLmFjdGl2ZSk7XG5cdFx0fSwgMCk7XG5cdH1cblxuXHRuZ09uSW5pdCgpIHtcblx0XHR0aGlzLnN0YXRlLnN1YnNjcmliZShzdGF0ZSA9PiB7XG5cdFx0XHRpZiAoc3RhdGUpIHtcblx0XHRcdFx0dGhpcy50ZXRoZXIgPSBuZXcgVGV0aGVyKHtcblx0XHRcdFx0XHRlbGVtZW50OiAnIycgKyB0aGlzLmlkICsgJ19tZW51Jyxcblx0XHRcdFx0XHR0YXJnZXQ6ICcjJyArIHRoaXMuaWQsXG5cdFx0XHRcdFx0YXR0YWNobWVudDogJ3RvcCBsZWZ0Jyxcblx0XHRcdFx0XHR0YXJnZXRBdHRhY2htZW50OiAnYm90dG9tIGxlZnQnLFxuXHRcdFx0XHRcdGNvbnN0cmFpbnRzOiBbXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRvOiAnd2luZG93Jyxcblx0XHRcdFx0XHRcdFx0YXR0YWNobWVudDogJ3RvZ2V0aGVyJ1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdF1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dGhpcy50ZXRoZXIucG9zaXRpb24oKTtcblxuXHRcdFx0XHQvLyBzZXQgdXAgY2xpY2sgbGlzdGVuZXIgYW5kIGxpc3RlbiBmb3IgY2xpY2sgb3V0c2lkZSBkcm9wZG93blxuXHRcdFx0XHR0aGlzLmNsaWNrTGlzdGVuZXIgPSB0aGlzLnJlbmRlcmVyLmxpc3Rlbihcblx0XHRcdFx0XHQnZG9jdW1lbnQnLFxuXHRcdFx0XHRcdCdjbGljaycsXG5cdFx0XHRcdFx0KGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0dGhpcy5zdGF0ZS5uZXh0KHRoaXMuYWN0aXZlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gc2V0IHVwIGtleWJvYXJkIGxpc3RlbmVyIGFuZCBsaXN0ZW4gZm9yIGVzY2FwZSBrZXkgdXBcblx0XHRcdFx0dGhpcy5rZXl1cExpc3RlbmVyID0gdGhpcy5yZW5kZXJlci5saXN0ZW4oXG5cdFx0XHRcdFx0J2RvY3VtZW50Jyxcblx0XHRcdFx0XHQna2V5dXAnLFxuXHRcdFx0XHRcdChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0c3dpdGNoIChldmVudC5rZXkpIHtcblx0XHRcdFx0XHRcdFx0Y2FzZSAnRXNjYXBlJzpcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuc3RhdGUubmV4dCh0aGlzLmFjdGl2ZSk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy50ZXRoZXIuZGVzdHJveSgpO1xuXHRcdFx0XHR0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0bmdPbkRlc3Ryb3koKSB7XG5cdFx0dGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcblx0fVxuXG5cdHJlbW92ZUxpc3RlbmVycygpIHtcblx0XHRpZiAodGhpcy5jbGlja0xpc3RlbmVyKSB7XG5cdFx0XHR0aGlzLmNsaWNrTGlzdGVuZXIoKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMua2V5dXBMaXN0ZW5lcikge1xuXHRcdFx0dGhpcy5rZXl1cExpc3RlbmVyKCk7XG5cdFx0fVxuXHR9XG59XG4iXX0=