/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
export class GtFilterPipe {
    /**
     * @param {?} allRows
     * @param {?} filterBy
     * @param {?} gtInfo
     * @param {?} refreshFilter
     * @param {?} refreshData
     * @return {?}
     */
    transform(allRows, filterBy, gtInfo, refreshFilter, refreshData) {
        // console.log(allRows,filterBy);
        gtInfo.recordsAll = allRows.length;
        if (!Array.isArray(allRows) || !filterBy) {
            // gtInfo.filtered = false;
            const /** @type {?} */ length = allRows === null ? 0 : allRows.length;
            gtInfo.recordsAfterFilter = length;
            return allRows;
        }
        const /** @type {?} */ output = [];
        for (let /** @type {?} */ i = 0; i < allRows.length; i++) {
            const /** @type {?} */ rowObject = allRows[i];
            let /** @type {?} */ match = true;
            for (const /** @type {?} */ property in filterBy) {
                if (filterBy.hasOwnProperty(property)) {
                    // console.log(property);
                    // console.log(filter[property].indexOf(obj[property]));
                    if (filterBy[property].indexOf(rowObject[property]) === -1) {
                        match = false;
                    }
                }
            }
            if (match) {
                output.push(rowObject);
            }
        }
        gtInfo.recordsAfterFilter = output.length; // .emit(output.length);
        return output;
    }
}
GtFilterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'gtFilter'
            },] },
];
function GtFilterPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtFilterPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtFilterPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtZmlsdGVyLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1nZW5lcmljLXRhYmxlL2NvcmUvIiwic291cmNlcyI6WyJwaXBlcy9ndC1maWx0ZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBdUMsTUFBTSxlQUFlLENBQUM7QUFNMUUsTUFBTTs7Ozs7Ozs7O0lBR0wsU0FBUyxDQUNSLE9BQWMsRUFDZCxRQUFnQixFQUNoQixNQUFxQixFQUNyQixhQUFzQixFQUN0QixXQUFtQjs7UUFHbkIsTUFBTSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFOztZQUd6Qyx1QkFBTSxNQUFNLEdBQUcsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxNQUFNLENBQUM7WUFDbkMsT0FBTyxPQUFPLENBQUM7U0FDZjtRQUVELHVCQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDbEIsS0FBSyxxQkFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLHVCQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IscUJBQUksS0FBSyxHQUFHLElBQUksQ0FBQztZQUVqQixLQUFLLHVCQUFNLFFBQVEsSUFBSSxRQUFRLEVBQUU7Z0JBQ2hDLElBQUksUUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTs7O29CQUd0QyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7d0JBQzNELEtBQUssR0FBRyxLQUFLLENBQUM7cUJBQ2Q7aUJBQ0Q7YUFDRDtZQUNELElBQUksS0FBSyxFQUFFO2dCQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDdkI7U0FDRDtRQUNELE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzFDLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7OztZQTNDRCxJQUFJLFNBQUM7Z0JBQ0wsSUFBSSxFQUFFLFVBQVU7YUFDaEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3RJbmZvcm1hdGlvbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvZ3QtaW5mb3JtYXRpb24nO1xuXG5AUGlwZSh7XG5cdG5hbWU6ICdndEZpbHRlcidcbn0pXG5leHBvcnQgY2xhc3MgR3RGaWx0ZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cdC8vIEBPdXRwdXQoKSBmaWx0ZXJJbmZvID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5cdHRyYW5zZm9ybShcblx0XHRhbGxSb3dzOiBhbnlbXSxcblx0XHRmaWx0ZXJCeTogT2JqZWN0LFxuXHRcdGd0SW5mbzogR3RJbmZvcm1hdGlvbixcblx0XHRyZWZyZXNoRmlsdGVyOiBib29sZWFuLFxuXHRcdHJlZnJlc2hEYXRhOiBudW1iZXJcblx0KTogYW55W10ge1xuXHRcdC8vIGNvbnNvbGUubG9nKGFsbFJvd3MsZmlsdGVyQnkpO1xuXHRcdGd0SW5mby5yZWNvcmRzQWxsID0gYWxsUm93cy5sZW5ndGg7XG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KGFsbFJvd3MpIHx8ICFmaWx0ZXJCeSkge1xuXHRcdFx0Ly8gZ3RJbmZvLmZpbHRlcmVkID0gZmFsc2U7XG5cblx0XHRcdGNvbnN0IGxlbmd0aCA9IGFsbFJvd3MgPT09IG51bGwgPyAwIDogYWxsUm93cy5sZW5ndGg7XG5cdFx0XHRndEluZm8ucmVjb3Jkc0FmdGVyRmlsdGVyID0gbGVuZ3RoO1xuXHRcdFx0cmV0dXJuIGFsbFJvd3M7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgb3V0cHV0ID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhbGxSb3dzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCByb3dPYmplY3QgPSBhbGxSb3dzW2ldO1xuXHRcdFx0bGV0IG1hdGNoID0gdHJ1ZTtcblxuXHRcdFx0Zm9yIChjb25zdCBwcm9wZXJ0eSBpbiBmaWx0ZXJCeSkge1xuXHRcdFx0XHRpZiAoZmlsdGVyQnkuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2cocHJvcGVydHkpO1xuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKGZpbHRlcltwcm9wZXJ0eV0uaW5kZXhPZihvYmpbcHJvcGVydHldKSk7XG5cdFx0XHRcdFx0aWYgKGZpbHRlckJ5W3Byb3BlcnR5XS5pbmRleE9mKHJvd09iamVjdFtwcm9wZXJ0eV0pID09PSAtMSkge1xuXHRcdFx0XHRcdFx0bWF0Y2ggPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChtYXRjaCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChyb3dPYmplY3QpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRndEluZm8ucmVjb3Jkc0FmdGVyRmlsdGVyID0gb3V0cHV0Lmxlbmd0aDsgLy8gLmVtaXQob3V0cHV0Lmxlbmd0aCk7XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxufVxuIl19